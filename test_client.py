import asyncio
import websockets
import json
import random
import time
from typing import List, Dict

class TestStats:
    def __init__(self):
        self.start_time = time.time()
        self.sent_chunks: Dict[str, int] = {}
        self.received_results: Dict[str, int] = {}
        self.processing_times: List[float] = []
        self.worker_distribution: Dict[str, int] = {}
    
    def chunk_sent(self, client_name: str):
        self.sent_chunks[client_name] = self.sent_chunks.get(client_name, 0) + 1
    
    def result_received(self, client_name: str, processing_time: float, transcript: str):
        self.received_results[client_name] = self.received_results.get(client_name, 0) + 1
        self.processing_times.append(processing_time)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –≤–æ—Ä–∫–µ—Ä–∞ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
        if "[Worker" in transcript:
            worker_info = transcript.split("]")[0] + "]"
            self.worker_distribution[worker_info] = self.worker_distribution.get(worker_info, 0) + 1
    
    def print_summary(self):
        total_time = time.time() - self.start_time
        total_sent = sum(self.sent_chunks.values())
        total_received = sum(self.received_results.values())
        
        print("\n" + "="*50)
        print("üìä TEST RESULTS SUMMARY")
        print("="*50)
        print(f"‚è±Ô∏è  Total test time: {total_time:.2f}s")
        print(f"üì® Total chunks sent: {total_sent}")
        print(f"üì• Total results received: {total_received}")
        print(f"‚úÖ Success rate: {(total_received/total_sent)*100:.1f}%")
        
        if self.processing_times:
            avg_time = sum(self.processing_times) / len(self.processing_times)
            min_time = min(self.processing_times)
            max_time = max(self.processing_times)
            print(f"‚ö° Avg processing time: {avg_time:.2f}s")
            print(f"‚ö° Min processing time: {min_time:.2f}s")
            print(f"‚ö° Max processing time: {max_time:.2f}s")
        
        print("\nüîß Worker Distribution:")
        for worker, count in sorted(self.worker_distribution.items()):
            print(f"   {worker}: {count} chunks ({(count/total_received)*100:.1f}%)")
        
        print("\nüë• Per Client Stats:")
        for client in self.sent_chunks:
            sent = self.sent_chunks.get(client, 0)
            received = self.received_results.get(client, 0)
            print(f"   {client}: {received}/{sent} chunks ({(received/sent)*100:.1f}%)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å
        unique_workers = len(self.worker_distribution)
        print(f"\nüöÄ Parallelism Check:")
        print(f"   Unique workers used: {unique_workers}")
        print(f"   Parallel processing: {'‚úÖ YES' if unique_workers > 1 else '‚ùå NO'}")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
stats = TestStats()

async def test_client(client_name: str, num_chunks: int = 8):
    """–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    uri = "ws://localhost:8765"
    
    try:
        async with websockets.connect(uri) as websocket:
            print(f"üîå {client_name} connected")
            
            # –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            async def listen():
                try:
                    async for message in websocket:
                        data = json.loads(message)
                        if data['type'] == 'transcription':
                            transcript = data['transcript']
                            processing_time = data['processing_time']
                            
                            print(f"üìù {client_name} received: '{transcript}' "
                                  f"(processed in {processing_time:.2f}s)")
                            
                            stats.result_received(client_name, processing_time, transcript)
                            
                        elif data['type'] == 'connection':
                            print(f"‚úÖ {client_name} got client_id: {data['client_id']}")
                        elif data['type'] == 'error':
                            print(f"‚ùå {client_name} error: {data['error']}")
                except websockets.exceptions.ConnectionClosed:
                    print(f"üîå {client_name} connection closed")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—è
            listen_task = asyncio.create_task(listen())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—É–¥–∏–æ —á–∞–Ω–∫–∏
            for i in range(num_chunks):
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º fake –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
                fake_audio = bytes([random.randint(0, 255) for _ in range(random.randint(512, 2048))])
                
                await websocket.send(fake_audio)
                print(f"üì® {client_name} sent audio chunk {i+1}/{num_chunks}")
                stats.chunk_sent(client_name)
                
                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(random.uniform(0.1, 0.5))
            
            # –ñ–¥–µ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await asyncio.sleep(15)
            
            listen_task.cancel()
            
    except Exception as e:
        print(f"‚ùå {client_name} error: {e}")

async def run_parallel_test():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    print("üß™ Starting PARALLEL PROCESSING test...")
    print("üéØ Goal: Verify multiple workers process chunks simultaneously\n")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ–ª—å—à–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —á–∞–Ω–∫–æ–≤
    clients = [
        test_client("Alice", 6),
        test_client("Bob", 6), 
        test_client("Charlie", 6),
        test_client("Diana", 6),
        test_client("Eve", 6)
    ]
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    await asyncio.gather(*clients)
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats.print_summary()

if __name__ == "__main__":
    asyncio.run(run_parallel_test()) 